// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation
import TiktokenFFI
// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_tiktoken_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_tiktoken_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
// Initial value and increment amount for handles. 
// These ensure that SWIFT handles always have the lowest bit set
fileprivate let UNIFFI_HANDLEMAP_INITIAL: UInt64 = 1
fileprivate let UNIFFI_HANDLEMAP_DELTA: UInt64 = 2

fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = UNIFFI_HANDLEMAP_INITIAL

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            return doInsert(obj)
        }
    }

    // Low-level insert function, this assumes `lock` is held.
    private func doInsert(_ obj: T) -> UInt64 {
        let handle = currentHandle
        currentHandle += UNIFFI_HANDLEMAP_DELTA
        map[handle] = obj
        return handle
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

     func clone(handle: UInt64) throws -> UInt64 {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return doInsert(obj)
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




public protocol CoreBpeProtocol: AnyObject, Sendable {
    
    func decodeBytes(tokens: [UInt32]) throws  -> Data
    
    func decodeSingleTokenBytes(token: UInt32) throws  -> Data
    
    func encode(text: String, allowedSpecial: [String])  -> [UInt32]
    
    func encodeBytes(input: Data)  -> [UInt32]
    
    func encodeOrdinary(text: String)  -> [UInt32]
    
    func encodeSinglePiece(piece: Data)  -> [UInt32]
    
    func encodeSingleToken(piece: Data) throws  -> UInt32
    
    func encodeWithDetails(text: String, allowedSpecial: [String])  -> EncodingResult
    
    func encodeWithSpecialTokens(text: String)  -> [UInt32]
    
    func encodeWithUnstable(text: String, allowedSpecial: [String])  -> UnstableEncodingResult
    
    func maxTokenValue()  -> UInt32
    
    func nVocab()  -> UInt32
    
    func specialTokens()  -> [String]
    
    func tokenByteValues()  -> [Data]
    
}
open class CoreBpe: CoreBpeProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_tiktoken_fn_clone_corebpe(self.handle, $0) }
    }
public convenience init(encoder: [String: UInt32], specialTokensEncoder: [String: UInt32], pattern: String) {
    let handle =
        try! rustCall() {
    uniffi_tiktoken_fn_constructor_corebpe_new(
        FfiConverterDictionaryStringUInt32.lower(encoder),
        FfiConverterDictionaryStringUInt32.lower(specialTokensEncoder),
        FfiConverterString.lower(pattern),$0
    )
}
    self.init(unsafeFromHandle: handle)
}

    deinit {
        try! rustCall { uniffi_tiktoken_fn_free_corebpe(handle, $0) }
    }

    

    
open func decodeBytes(tokens: [UInt32])throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeTiktokenError_lift) {
    uniffi_tiktoken_fn_method_corebpe_decode_bytes(self.uniffiCloneHandle(),
        FfiConverterSequenceUInt32.lower(tokens),$0
    )
})
}
    
open func decodeSingleTokenBytes(token: UInt32)throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeTiktokenError_lift) {
    uniffi_tiktoken_fn_method_corebpe_decode_single_token_bytes(self.uniffiCloneHandle(),
        FfiConverterUInt32.lower(token),$0
    )
})
}
    
open func encode(text: String, allowedSpecial: [String]) -> [UInt32]  {
    return try!  FfiConverterSequenceUInt32.lift(try! rustCall() {
    uniffi_tiktoken_fn_method_corebpe_encode(self.uniffiCloneHandle(),
        FfiConverterString.lower(text),
        FfiConverterSequenceString.lower(allowedSpecial),$0
    )
})
}
    
open func encodeBytes(input: Data) -> [UInt32]  {
    return try!  FfiConverterSequenceUInt32.lift(try! rustCall() {
    uniffi_tiktoken_fn_method_corebpe_encode_bytes(self.uniffiCloneHandle(),
        FfiConverterData.lower(input),$0
    )
})
}
    
open func encodeOrdinary(text: String) -> [UInt32]  {
    return try!  FfiConverterSequenceUInt32.lift(try! rustCall() {
    uniffi_tiktoken_fn_method_corebpe_encode_ordinary(self.uniffiCloneHandle(),
        FfiConverterString.lower(text),$0
    )
})
}
    
open func encodeSinglePiece(piece: Data) -> [UInt32]  {
    return try!  FfiConverterSequenceUInt32.lift(try! rustCall() {
    uniffi_tiktoken_fn_method_corebpe_encode_single_piece(self.uniffiCloneHandle(),
        FfiConverterData.lower(piece),$0
    )
})
}
    
open func encodeSingleToken(piece: Data)throws  -> UInt32  {
    return try  FfiConverterUInt32.lift(try rustCallWithError(FfiConverterTypeTiktokenError_lift) {
    uniffi_tiktoken_fn_method_corebpe_encode_single_token(self.uniffiCloneHandle(),
        FfiConverterData.lower(piece),$0
    )
})
}
    
open func encodeWithDetails(text: String, allowedSpecial: [String]) -> EncodingResult  {
    return try!  FfiConverterTypeEncodingResult_lift(try! rustCall() {
    uniffi_tiktoken_fn_method_corebpe_encode_with_details(self.uniffiCloneHandle(),
        FfiConverterString.lower(text),
        FfiConverterSequenceString.lower(allowedSpecial),$0
    )
})
}
    
open func encodeWithSpecialTokens(text: String) -> [UInt32]  {
    return try!  FfiConverterSequenceUInt32.lift(try! rustCall() {
    uniffi_tiktoken_fn_method_corebpe_encode_with_special_tokens(self.uniffiCloneHandle(),
        FfiConverterString.lower(text),$0
    )
})
}
    
open func encodeWithUnstable(text: String, allowedSpecial: [String]) -> UnstableEncodingResult  {
    return try!  FfiConverterTypeUnstableEncodingResult_lift(try! rustCall() {
    uniffi_tiktoken_fn_method_corebpe_encode_with_unstable(self.uniffiCloneHandle(),
        FfiConverterString.lower(text),
        FfiConverterSequenceString.lower(allowedSpecial),$0
    )
})
}
    
open func maxTokenValue() -> UInt32  {
    return try!  FfiConverterUInt32.lift(try! rustCall() {
    uniffi_tiktoken_fn_method_corebpe_max_token_value(self.uniffiCloneHandle(),$0
    )
})
}
    
open func nVocab() -> UInt32  {
    return try!  FfiConverterUInt32.lift(try! rustCall() {
    uniffi_tiktoken_fn_method_corebpe_n_vocab(self.uniffiCloneHandle(),$0
    )
})
}
    
open func specialTokens() -> [String]  {
    return try!  FfiConverterSequenceString.lift(try! rustCall() {
    uniffi_tiktoken_fn_method_corebpe_special_tokens(self.uniffiCloneHandle(),$0
    )
})
}
    
open func tokenByteValues() -> [Data]  {
    return try!  FfiConverterSequenceData.lift(try! rustCall() {
    uniffi_tiktoken_fn_method_corebpe_token_byte_values(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCoreBpe: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = CoreBpe

    public static func lift(_ handle: UInt64) throws -> CoreBpe {
        return CoreBpe(unsafeFromHandle: handle)
    }

    public static func lower(_ value: CoreBpe) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CoreBpe {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: CoreBpe, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCoreBpe_lift(_ handle: UInt64) throws -> CoreBpe {
    return try FfiConverterTypeCoreBpe.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCoreBpe_lower(_ value: CoreBpe) -> UInt64 {
    return FfiConverterTypeCoreBpe.lower(value)
}




public struct EncodingResult {
    public var tokens: [UInt32]
    public var lastPieceTokenLen: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(tokens: [UInt32], lastPieceTokenLen: UInt64) {
        self.tokens = tokens
        self.lastPieceTokenLen = lastPieceTokenLen
    }
}

#if compiler(>=6)
extension EncodingResult: Sendable {}
#endif


extension EncodingResult: Equatable, Hashable {
    public static func ==(lhs: EncodingResult, rhs: EncodingResult) -> Bool {
        if lhs.tokens != rhs.tokens {
            return false
        }
        if lhs.lastPieceTokenLen != rhs.lastPieceTokenLen {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(tokens)
        hasher.combine(lastPieceTokenLen)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEncodingResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EncodingResult {
        return
            try EncodingResult(
                tokens: FfiConverterSequenceUInt32.read(from: &buf), 
                lastPieceTokenLen: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: EncodingResult, into buf: inout [UInt8]) {
        FfiConverterSequenceUInt32.write(value.tokens, into: &buf)
        FfiConverterUInt64.write(value.lastPieceTokenLen, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEncodingResult_lift(_ buf: RustBuffer) throws -> EncodingResult {
    return try FfiConverterTypeEncodingResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEncodingResult_lower(_ value: EncodingResult) -> RustBuffer {
    return FfiConverterTypeEncodingResult.lower(value)
}


public struct UnstableEncodingResult {
    public var tokens: [UInt32]
    public var completions: [[UInt32]]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(tokens: [UInt32], completions: [[UInt32]]) {
        self.tokens = tokens
        self.completions = completions
    }
}

#if compiler(>=6)
extension UnstableEncodingResult: Sendable {}
#endif


extension UnstableEncodingResult: Equatable, Hashable {
    public static func ==(lhs: UnstableEncodingResult, rhs: UnstableEncodingResult) -> Bool {
        if lhs.tokens != rhs.tokens {
            return false
        }
        if lhs.completions != rhs.completions {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(tokens)
        hasher.combine(completions)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUnstableEncodingResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UnstableEncodingResult {
        return
            try UnstableEncodingResult(
                tokens: FfiConverterSequenceUInt32.read(from: &buf), 
                completions: FfiConverterSequenceSequenceUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: UnstableEncodingResult, into buf: inout [UInt8]) {
        FfiConverterSequenceUInt32.write(value.tokens, into: &buf)
        FfiConverterSequenceSequenceUInt32.write(value.completions, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUnstableEncodingResult_lift(_ buf: RustBuffer) throws -> UnstableEncodingResult {
    return try FfiConverterTypeUnstableEncodingResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUnstableEncodingResult_lower(_ value: UnstableEncodingResult) -> RustBuffer {
    return FfiConverterTypeUnstableEncodingResult.lower(value)
}


public enum TiktokenError: Swift.Error {

    
    
    case ValueError(message: String)
    
    case KeyError(message: String)
    
    case DecodeError(message: String)
    
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTiktokenError: FfiConverterRustBuffer {
    typealias SwiftType = TiktokenError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TiktokenError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .ValueError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .KeyError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .DecodeError(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TiktokenError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .ValueError(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .KeyError(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .DecodeError(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))

        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTiktokenError_lift(_ buf: RustBuffer) throws -> TiktokenError {
    return try FfiConverterTypeTiktokenError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTiktokenError_lower(_ value: TiktokenError) -> RustBuffer {
    return FfiConverterTypeTiktokenError.lower(value)
}


extension TiktokenError: Equatable, Hashable {}




extension TiktokenError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceUInt32: FfiConverterRustBuffer {
    typealias SwiftType = [UInt32]

    public static func write(_ value: [UInt32], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt32.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt32] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt32]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt32.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceData: FfiConverterRustBuffer {
    typealias SwiftType = [Data]

    public static func write(_ value: [Data], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterData.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Data] {
        let len: Int32 = try readInt(&buf)
        var seq = [Data]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterData.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceSequenceUInt32: FfiConverterRustBuffer {
    typealias SwiftType = [[UInt32]]

    public static func write(_ value: [[UInt32]], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterSequenceUInt32.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [[UInt32]] {
        let len: Int32 = try readInt(&buf)
        var seq = [[UInt32]]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterSequenceUInt32.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDictionaryStringUInt32: FfiConverterRustBuffer {
    public static func write(_ value: [String: UInt32], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterUInt32.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: UInt32] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: UInt32]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterUInt32.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}
public func newCoreBpe(encoder: [String: UInt32], specialTokensEncoder: [String: UInt32], pattern: String)throws  -> CoreBpe  {
    return try  FfiConverterTypeCoreBpe_lift(try rustCallWithError(FfiConverterTypeTiktokenError_lift) {
    uniffi_tiktoken_fn_func_new_core_bpe(
        FfiConverterDictionaryStringUInt32.lower(encoder),
        FfiConverterDictionaryStringUInt32.lower(specialTokensEncoder),
        FfiConverterString.lower(pattern),$0
    )
})
}

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureTiktokenInitialized() {
    // Contract version checking has been removed - initialization always succeeds
}

// swiftlint:enable all